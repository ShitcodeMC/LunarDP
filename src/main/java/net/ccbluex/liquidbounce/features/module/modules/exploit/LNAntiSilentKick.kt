package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import net.minecraft.network.play.client.C01PacketChatMessage
import net.minecraft.network.play.server.S14PacketEntity
import net.minecraft.network.play.server.S00PacketKeepAlive
import net.minecraft.network.play.server.S14PacketEntity.S15PacketEntityRelMove
import net.minecraft.network.play.server.S32PacketConfirmTransaction
import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.ui.client.hud.element.elements.Notification
import net.ccbluex.liquidbounce.ui.client.hud.element.elements.NotifyType
import net.ccbluex.liquidbounce.event.*
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo


@ModuleInfo(name = "AntiSilentKick", category = ModuleCategory.EXPLOIT)
class LNAntiSilentKick : Module() {
	private val lastRecievedMovePacket = MSTimer()
	private var rejoin = false;
    override fun onEnable() {
		rejoin=false
		lastRecievedMovePacket.reset()
    }
	private fun doRejoin() {
		mc.netHandler.addToSendQueue(C01PacketChatMessage("/bedwars-lobbies"))
		rejoin=true
	}
	@EventTarget
	fun onWorld(event: WorldEvent) {
		
		mc.netHandler.addToSendQueue(C01PacketChatMessage("/rejoin"))
		LiquidBounce.hud.addNotification(Notification("I Love Jiternos", "Rejoined", NotifyType.INFO))
		rejoin=false
		
	}
	@EventTarget
    fun onUpdate(event: UpdateEvent) {
		if (lastRecievedMovePacket.hasTimePassed(3000)) {
			LiquidBounce.hud.addNotification(Notification("I Love Jiternos and FacedLoader.jar!", "Rejoining", NotifyType.INFO))
			doRejoin()
			lastRecievedMovePacket.reset()
		}
    }
	@EventTarget
	fun onPacket(event: PacketEvent) {
        val packet = event.packet

        if (packet is S15PacketEntityRelMove || packet is S14PacketEntity || packet is S00PacketKeepAlive || packet is C0FPacketConfirmTransaction) {
            lastRecievedMovePacket.reset()
        }
    }
}
